 
Git
- version control system is a tool that helps to track the changes in code 
- git is a version control system. 

it is : 
> popular
> free and open source
> fast and scalable.

we use git primarly for two work.
1). To track the history
2). to collabrate.


Github 
> website that allows developers to store and manage their code using git.
	"https://github.com"
(the developers store their code in github in the form of "folder"  which is in github terminology know as "Repository" / "Repo's" )
so github is a websit were we are uploading our project and code and we can also see the repository of "other persons" .


> "commit" means "changes" in github.


########### Setting up Git ######### 

> visual studio code (micosoft).
> Windows (Git Bash).
> Mac (Terminal).

 To check after final setup "get --version"

########### Configuring Git  #############

>   git config --global user.name "My Name"
> git config --global user.email "someone@gmail.com"
> git config --list

###### basic commands #########

		< 		clone and status 		>						"remote"				"local"
> clone- cloning a repository on a local machine.						[github]				[pc, laptop]
		(git clone < some link >)								| folder in a github	    |
														|	repository	    |
> status- displays the status of the code.
	(git status)

Note: cd :–––> change directory 			[Directory == Folder == Repository, all are same with different name ]
Note: ls :–––> list down the file's inside folder,	
			And to see "hidden" file's inside any folder we use  [ls -a]


>>> when we modified the file then we have to perform two operation's, so that git can see and track the changes.
> add .
> commit.


#### so we have four types of status 								change /   	newfile
> untracked													(modifed)		(untracked)
	—> new files that git doesn't yet track.									|
> modified															^
	––> changed														add (staged)
> staged																|
	——> file is ready to be commited.										^
> unmodifed															commit (unchanged)
	——> unchanged


##### So to track the changes by git ##### 

< we use to command "add" and "commit" >

< add >
	: ——> adds new and changed files in your working directory to the git staging area.
		[ git add <file_name> ] 
 			( git add . ) : ——> to add all the file.

< commit >
	: ––—> it is a record of change
	[ git commit -m "some message" ]

< push >
	: ——> push the local repo content to remote repo. (means local (our laptops) to github).
		[ git push origin main]

< inet command >
	:–––> used to create a new git repo
>>> git init
>>> git remote add origin <..link..>
>>> git remote -v     (to verify remote)
>>> git branch 	(to check branch)
>>> git branch -M main		(to rename branch)				<	master ————> main	 >
>>> git push origin main
	
*********** 	WORK-FLOW 	*********

	local git 
				
			github repo
				|
			    clone
				|
			  changes
			  	|
			     add
				|
			   commit
				|
			     push



###############	   Branch Commands 	################

>>> git branch 
>>> git branch -m main      <to rename the branch>
>>> git checkout  <	-branch_name- >   			( to navigate )
>>> git checkout -b < new branch_name >		( to create new branch )

>>> git checkout -d < branch_name > 			( to delete branch )


################# Merging Code ##################### 

way 1:
		git diff < branch_name >  			( to compare commits, branches, file & more ).
		git merge < to merge 2 branches >
		
way 2:

Create PR   ( PR ———> Pull Request ).


############# Pull command ###############
 
		[ git pull origin main ]

>>> used to fetch and download content from a remote repo and immendiately update the local repo to match that content.


############### Rsolving merge conflicts ################ 

An event that takes place when git is unable to automatically resolve difference  in code between two commits.


**** [ git log ] :——> to see all the commit which we have down. (commit history !)

################### Ondoing Changes ###################

case 1: stages changes
		git reset <-file_name->

case 2: commited changes ( for one commit ).
		git reset HEAD~1

case 3: commited changes ( for many changes ).
		git reset < commit hash>
		git reset --hard < commit hash> 				(to see the changes in both side remote(github) and vs-code(local) also).

	Note : { " --hard " is for to see the changes in the vs-code also }.


###################### Fork #######################

—> A Fork is a new repository that shares code and visiblity setting with the original "upstream" repository. 

- Fork is a rough copy.


















